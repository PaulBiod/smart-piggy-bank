esphome:
  name: tirelire-s3
  friendly_name: tirelire-S3
  platformio_options:
    build_flags: "-DBOARD_HAS_PSRAM"
    board_build.arduino.memory_type: qio_opi
  on_boot:
    then:
      - script.execute: display_script
      - script.execute: my_timer
      - light.turn_on:
          id: led_coins
          brightness: 60%
          red: 30%
          green: 63%
          blue: 100%
  includes:
    - wifi_icon.h


psram:

esp32:
  board: esp32-s3-devkitc-1
  flash_size: 16MB
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "Your key"

ota:
  platform: esphome
  password: "pass"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Tirelire-S3 Fallback Hotspot"
    password: "SBFoAbtj13no"

captive_portal:

globals:
  - id: total_retirer
    type: float
    restore_value: no
    initial_value: "0.00"
  - id: confirm_valider
    type: int
    restore_value: no
    initial_value: '0'
  - id: ecran_veille
    type: int
    initial_value: "0"

image:
  - file: "img/argent.jpg"
    id: my_image
    resize: 320x240
    type: RGB24
  - file: "img/pile_monnaie.jpg"
    id: my_image2
    resize: 320x240
    type: RGB24
animation:
  - file: "img/coins.gif"
    id: my_animation
    resize: 100x100
    type: RGBA

color:
  - id: my_red
    red: 100%
    green: 0%
    blue: 0%
  - id: my_white
    red: 100%
    green: 100%
    blue: 100%
  - id: my_yellow
    red: 100%
    green: 100%
    blue: 0%
  - id: my_green
    red: 0%
    green: 100%
    blue: 0%
  - id: my_blue
    red: 5%
    green: 5%
    blue: 90%
  - id: my_gray
    red: 70%
    green: 70%
    blue: 70%
  - id: my_black
    red: 0%
    green: 0%
    blue: 0%
  - id: my_orange
    red_int: 255
    green_int: 165
    blue_int: 0
    white_int: 0
  - id: my_brun
    red_int: 165
    green_int: 132
    blue_int: 44
    white_int: 0
  - id: my_blue_light
    red_int: 76
    green_int: 161
    blue_int: 255
    white_int: 0

number:
  - platform: template
    name: "tirelire slider"
    id: "tirelire_slider"
    step: 0.1
    min_value: 0
    max_value: 1
    restore_value: true
    mode: slider
    optimistic: true
    set_action:
      then:
        - lambda:  id(backlight).set_level(x);

switch:
    - platform: restart
      name: "Tirelire restart"
      id: tirelire_restart  
    
    - platform: output 
      name: 'buzzer'
      id: buzzer
      output: buzzer_output
      on_turn_on: 
        then:
          - script.execute: melodie

      on_turn_off:
        then:
          - output.turn_off: buzzer_output
rtttl:
  # Example tones : https://codebender.cc/sketch:109888#RTTTL%20Songs.ino
  output: buzzer_output
  id: my_rtttl

output:
  - platform: ledc
    pin: GPIO42
    id: backlight
    #frequency: 1000 Hz

  - platform: ledc
    pin: GPIO1
    id: buzzer_output

light:
  - platform: monochromatic
    output: backlight
    name: "Backlight"
    id: Ecran
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 1s

  - platform: neopixelbus
    type: GRB
    variant: WS2812
    pin: GPIO17
    num_leds: 8
    name: "Eclairage numéros"
    id: led_coins
    method:
      type: esp32_rmt
      channel : 1
    effects:
      - strobe:
      - strobe:
          name: Strobe Effect With Custom Values
          colors:
            - state: true
              brightness: 100%
              red: 0%
              green: 100%
              blue: 0%
              duration: 100ms
            - state: false
              duration: 50ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 100ms
            - state: false
              duration: 50ms
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 100ms



font:
  - file: 'fonts/Karla-Bold.ttf'
    id: karla
    size: 75
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñáó€'
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font_wifi
    size: 25
    glyphs:
      - "\U000F05A9" # wifi-4
      - "\U000F0925" # wifi-3 
      - "\U000F0922" # wifi-2
      - "\U000F091F" # wifi-1
      - "\U000F0920" # Low-wifi
      - "\U000F092B" # No-wifi
      - "\U000F058E" # humidity
      - "\U000F050F" # temperature
      - "\U000F00DE" # brightness

  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_confirm
    size: 40
    glyphs:
       - "\U000F0159" # cancel
       - "\U000F05E0" # valid
  - file: 'fonts/modern.ttf'
    id: modern_small
    size: 18
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñáú?'
  - file: 'fonts/Verdana.ttf'
    id: roboto
    size: 40
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá€*#'
  - file: 'fonts/Verdana.ttf'
    id: roboto4
    size: 25
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá€?'
  - file: 'fonts/Verdana.ttf'
    id: roboto10
    size: 32
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá€'
  - file: 'fonts/Verdana.ttf'
    id: roboto11
    size: 27
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá€'
  - file: 'fonts/Verdana.ttf'
    id: roboto9
    size: 17
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá?'
  - file: 'fonts/Verdana.ttf'
    id: roboto2
    size: 15
    glyphs: '!"%()+,-_/.:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá'
  - file: 'fonts/Verdana.ttf'
    id: roboto3
    size: 13
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá'
  - file: 'fonts/Verdana.ttf'
    id: roboto8
    size: 9
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá'
  - file: 'fonts/Verdana.ttf'
    id: roboto7
    size: 9
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá'
  - file: 
      type: gfonts
      family: Cute Font
      
    id: roboto5
    size: 18
    
    glyphs: '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz'
  - file: 'fonts/Verdana.ttf'
    id: roboto6
    size: 12
    glyphs: '!"%()+,-_./:°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZÅÄÖ abcdefghijklmnopqrstuvwxyzîÎåäöéàèçêñá'
  - file: 'fonts/modern.ttf'
    id: modern
    size: 23
    glyphs: '!"%()+,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz€'
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: icon_font
    size: 17
    glyphs:
      - "\U000F0748" # light
      - "\U000F0F55" # house temperature
      - "\U000F18D6" # sun temperature
      - "\U000F0405" # forest
      - "\U000F0241" # electricity
      - "\U000F11DC" # window open
      - "\U000F011B" # cat
      - "\U000F09A1" # shower
      - "\U000F09AB" # toilet
      - "\U000F04B2" # sleep


  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 23
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_extra
    size: 40
    glyphs: &extramdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
      - "\U000F0D00" # quitar dinero  
      - "\U000F0A7A" # trash 
      - "\U000F0E1E" # valid 

spi:
 clk_pin: 14 #display SCK/touch T_CLK
 mosi_pin: 13 #display SDI(MOSI)/touch T_DIN
 miso_pin: GPIO12 #touch T_DO

touchscreen:
  platform: xpt2046
  display: my_display
  update_interval: 100ms
  id: touchid
  cs_pin: 21 #touch T_CS
  interrupt_pin: 16 #touch T_IRQ
  threshold: 400
  calibration: 
    x_min: 246
    x_max: 3905
    y_min: 300
    y_max: 3851
    
  transform: 
    mirror_x: true
  on_touch:
    then:
      - script.execute: reveil
      - logger.log: "ecran touche"

      - lambda: |-
          // This can be used to help calibrate the device.
          // See https://esphome.io/components/touchscreen/xpt2046.html#calibration
          ESP_LOGD("yaml", "touched (x=%d, y=%d), (x_raw=%d, y_raw=%d)", 
            touch.x, touch.y, touch.x_raw, touch.y_raw);



display:
  - platform: ili9xxx
    model: ili9341
    id: my_display
    cs_pin: GPIO15
    dc_pin: GPIO2
    reset_pin: 4
    auto_clear_enabled: true
    data_rate: 40MHz
    dimensions: 240x320
    rotation: 270
    invert_colors: false
    #transform:
      #mirror_x: true
      #mirror_y: false
      #swap_xy: false
    ## The panels will redraw themselves completely.
    update_interval: 1000ms
    pages:
      - id: page1
        lambda: |-
          //image
          it.image(0, 0, id(my_image));
          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          }

          // QUITAR DINERO
          if (id(total_tirelire).has_state()) {
          it.filled_rectangle(0, 0, 320, 80, my_black);
          it.printf(160, 30, id(modern), id(my_blue_light), TextAlign::CENTER_HORIZONTAL, "Total : %.2f €", id(total_tirelire).state);
          it.filled_rectangle(160, 180, 160, 60, my_red);
          it.rectangle(160, 180, 160, 60, my_white);
          it.print(170, 190, id(font_mdi_extra), id(my_white), "\U000F0D00" );
          it.print(220, 180, id(roboto4), id(my_white), "Quitar" );
          it.print(220, 205, id(roboto4), id(my_white), "dinero" );
          }
      - id: page2
        lambda: |-
          it.line(0, 60, 320, 60);
          it.line(0, 120, 320, 120);
          it.line(0, 180, 320, 180);
          it.line(107, 0, 107, 240);
          it.line(214, 0, 214, 240);
          it.print(41,30, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "1");
          it.print(150,30, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "2");
          it.print(260,30, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "3");
          it.print(41,90, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "4");
          it.print(150,90, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "5");
          it.print(260,90, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "6");
          it.print(41,150, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "7");
          it.print(150,150, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "8");
          it.print(260,150, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "9");
          it.print(41,220, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "*");
          it.print(150,210, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "0");
          it.print(260,210, id(roboto), id(my_white), TextAlign::CENTER_VERTICAL , "#");

          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          
          }

      - id: page3
        lambda: |-
          it.image(0, 0, id(my_image2));
          if (id(total_tirelire).has_state()) {
          it.filled_rectangle(0, 0, 320, 80, my_black);
          it.printf(160, 30, id(modern), id(my_blue_light), TextAlign::CENTER_HORIZONTAL, "Total : %.2f €", id(total_tirelire).state);
          // QUITAR DINERO
          it.filled_rectangle(160, 180, 160, 60, my_red);
          it.rectangle(160, 180, 160, 60, my_white);
          it.print(170, 190, id(font_mdi_extra), id(my_white), "\U000F0D00" );
          it.print(220, 180, id(roboto4), id(my_white), "Quitar" );
          it.print(220, 205, id(roboto4), id(my_white), "dinero" );
          }

          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          }


      - id: page4
        lambda: |-
          it.filled_rectangle(0, 0, 320, 40, my_blue);
          it.rectangle(0, 0, 320, 40, my_white);
          it.print(7, 7, id(roboto9), id(my_white),  "Cuanto dinero quieres sacar?");
          it.filled_rectangle(280, 0, 40, 40, my_black);
          it.rectangle(280, 0, 40, 40, my_white);
          it.print(289, 0, id(roboto10), id(my_white), "X");
          it.rectangle(70, 50, 180, 50, my_white);
          it.printf(160, 70, id(modern), id(my_white), TextAlign::CENTER_HORIZONTAL, "%.2f €", id(total_retirer));
          it.print(275, 55, id(font_mdi_extra), id(my_red), "\U000F0A7A");
          it.print(15, 55, id(font_mdi_extra), id(my_green), "\U000F0E1E");

          // 2 EUROS
          it.filled_circle(58, 138, 30, my_white);
          it.filled_circle(58, 138, 20, my_yellow);
          it.print(40, 120, id(roboto10), id(my_black), "2");
          it.print(60, 125, id(roboto4), id(my_black), "€");

          // 1 EUROS
          it.filled_circle(128, 141, 25, my_yellow);
          it.filled_circle(128, 141, 20, my_white);
          it.print(110, 120, id(roboto10), id(my_black), "1");
          it.print(130, 125, id(roboto4), id(my_black), "€");

          // 0.5 EUROS
          it.circle(198, 141, 28, my_yellow);
          it.filled_circle(198, 141, 25, my_yellow);
          it.print(180, 120, id(roboto10), id(my_black), "50");
          it.print(185, 148, id(roboto3), id(my_black), "cent");

          // 0.2 EUROS
          it.circle(268, 141, 25, my_yellow);
          it.filled_circle(268, 141, 23, my_yellow);
          it.print(248, 120, id(roboto10), id(my_black), "20");
          it.print(253, 148, id(roboto3), id(my_black), "cent");

          // 0.1 EUROS
          it.circle(58, 207, 23, my_yellow);
          it.filled_circle(58, 207, 21, my_yellow);
          it.print(40, 189, id(roboto11), id(my_black), "10");
          it.print(45, 212, id(roboto3), id(my_black), "cent");

          // 0.05 EUROS
          it.circle(128, 207, 28, my_brun);
          it.filled_circle(128, 207, 23, my_brun);
          it.print(107, 189, id(roboto10), id(my_black), "5");
          it.print(122, 190, id(roboto3), id(my_black), "cent");

          // 0.02 EUROS
          it.circle(198, 207, 25, my_brun);
          it.filled_circle(198, 207, 22, my_brun);
          it.print(177, 189, id(roboto10), id(my_black), "2");
          it.print(192, 190, id(roboto3), id(my_black), "cent");

          // 0.01 EUROS
          it.circle(268, 207, 22, my_brun);
          it.filled_circle(268, 207, 19, my_brun);
          it.print(247, 189, id(roboto10), id(my_black), "1");
          it.print(259, 190, id(roboto3), id(my_black), "cent");

          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          }
          

      - id: page5
        lambda: |-
          if(id(confirm_valider) == 1)
          {
          it.filled_rectangle(10, 20, 300, 200, my_red);
          it.filled_rectangle(20, 30, 280, 180, my_white);

          it.print(160, 50, id(modern_small),  id(my_black), TextAlign::CENTER_HORIZONTAL, "Seguro que quieres quitar");
          it.printf(160, 75, id(roboto4),  id(my_black), TextAlign::CENTER_HORIZONTAL, "%.2f EUR ?", id(total_retirer));

          // bouton ok
          it.filled_rectangle(40, 120, 80, 60, my_black);
          it.rectangle(40, 120, 80, 60, my_white);
          it.print(62, 130, id(font_mdi_confirm),  id(my_green), "\U000F05E0");

          // bouton cancel
          it.filled_rectangle(200, 120, 80, 60, my_black);
          it.rectangle(200, 120, 80, 60, my_white);
          it.print(222, 130, id(font_mdi_confirm),  id(my_red), "\U000F0159");
          }

          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          }
      - id: page6
        lambda: |-
          it.filled_rectangle(10, 20, 300, 200, my_red);
          it.filled_rectangle(20, 30, 280, 180, my_white);

          it.print(160, 70, id(modern_small),  id(my_black), TextAlign::CENTER_HORIZONTAL, "No tienes tanto dinero");
          it.print(160, 95, id(modern_small),  id(my_black), TextAlign::CENTER_HORIZONTAL, "como para quitar : ");
          it.printf(160, 120, id(modern_small),  id(my_black), TextAlign::CENTER_HORIZONTAL, "%.2f EUR", id(total_retirer));

          if (id(piece_lib).state != "") {
          it.filled_rectangle(0, 80, 320, 80, my_green);
          it.printf(160, 130, id(roboto4), id(my_black), TextAlign::BASELINE_CENTER, "%s", id(piece_lib).state.c_str());
          }
      - id: page7
        lambda: |-
          it.printf(280, 5, id(icon_font_wifi), "%s", wifi_icon(id(wifi_signal_pct).state));
          it.printf(160, 50, id(karla), id(my_blue_light), TextAlign::CENTER_HORIZONTAL, "%.2f €", id(total_tirelire).state);
          it.image(130, 130, id(my_animation));




sensor:


 
  - platform: wifi_signal # Reports the WiFi signal strength in %
    name: wifi_percent_tirelire
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    id: wifi_signal_pct
    update_interval: 60s
    entity_category: "diagnostic"


      



    


  - platform: homeassistant
    id: total_tirelire
    entity_id: input_number.total_tirelire




  - platform: template
    id: piece_int
    name: "piece_int"
    internal: False
    update_interval: never
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary
    
  - platform: template
    id: retrait
    name: "retrait"
    internal: False
    update_interval: never  

  - platform: template
    id: montant_retrait
    name: "montant retrait"
    internal: False
    update_interval: never
    unit_of_measurement: "€"
    accuracy_decimals: 2
    device_class: monetary



text_sensor:
  - platform: template
    id: piece_lib
    name: "piece_lib"
    internal: False
    update_interval: never






script:
  - id: melodie
    then:
      - rtttl.play: 'LightMyFire:d=4,o=5,b=140:4b,16g,16a,8b,8d6'

  - id: script_1
    #mode: restart
    then:
      - display.page.show: page1 # your page with the other stuff
      - logger.log: "Page 1"
      
  - id: script_2
    #mode: restart
    then:
      - logger.log: "Page 2"
      - display.page.show: page2 # your page with the other stuff

  - id: script_3
    #mode: restart
    then:
      - logger.log: "Page 3"
      - display.page.show: page3 # your page with the other stuff

  - id: script_4
    #mode: restart
    then:
      - logger.log: "Page 4"
      - display.page.show: page4 # your page with the other stuff


  - id: display_script
    #mode: restart
    then:
    - logger.log: "Debut display script"
    - while:
        condition:
          lambda: |-
            return true;
          
        then:
          - lambda: |-
              id(script_1)->execute();
          - delay: 10s
          - lambda: |-
              id(script_3)->execute();
          - delay: 10s

  - id: valider_retrait
    then:
    - sensor.template.publish:
            id: montant_retrait
            state: !lambda 'return id(total_retirer);' 
    - if:
        condition:
          lambda: |-
            return id(total_tirelire).state >= id(montant_retrait).state;
        then:
        - sensor.template.publish:
            id: retrait
            state: !lambda 'return 1;'
        - display.page.show: page1
        - delay: 2s
        - sensor.template.publish:
            id: retrait
            state: !lambda 'return 0;'
        - sensor.template.publish:
            id: montant_retrait
            state: !lambda 'return 0;' 
        - globals.set:
            id: total_retirer
            value: '0'
        - script.execute: display_script
        else:
        - display.page.show: page6
        - delay: 5s
        - display.page.show: page4
        - globals.set:
            id: total_retirer
            value: !lambda 'return id(total_tirelire).state;'
        - sensor.template.publish:
            id: montant_retrait
            state: !lambda 'return id(total_retirer);' 

  - id: reveil
    then:
      - script.stop: my_timer
      - script.execute: my_timer
      - if:
          condition:
            lambda: |-
              if(id(ecran_veille) == 1 ){ return true;} else { return false; }
          then:
            - globals.set:
                 id: ecran_veille
                 value: '0'
            - script.execute: display_script
            - lambda: id(backlight).set_level(1); 

  - id: my_timer
    then:
      - logger.log: "Debut script"
      - delay: 20s  # timer length
      - lambda: |-
          id(backlight).set_level(0.2);
      - globals.set:
          id: ecran_veille
          value: '1'
      - script.stop: display_script
      - display.page.show: page7



binary_sensor:


  - platform: touchscreen
    id: button_2
    name: bouton 2 euros
    touchscreen_id: touchid
    internal: true
    x_min: 21
    x_max: 65
    y_min: 110
    y_max: 180
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 2.00;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_1
    internal: true
    name: bouton 1 euro
    touchscreen_id: touchid
    x_min: 70
    x_max: 140
    y_min: 120
    y_max: 180
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 1.00;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_05
    internal: true
    name: bouton 50 cent
    touchscreen_id: touchid
    x_min: 150
    x_max: 205
    y_min: 120
    y_max: 180
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.50;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));


  - platform: touchscreen
    id: button_02
    internal: true
    name: bouton 20 cent
    touchscreen_id: touchid
    x_min: 215
    x_max: 290
    y_min: 120
    y_max: 180
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.20;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_01
    internal: true
    name: bouton 10 cent
    touchscreen_id: touchid
    x_min: 20
    x_max: 65
    y_min: 181
    y_max: 240
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.10;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_005
    internal: true
    name: bouton 5 cent
    touchscreen_id: touchid
    x_min: 70
    x_max: 140
    y_min: 181
    y_max: 240
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.05;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_002
    internal: true
    name: bouton 2 cent
    touchscreen_id: touchid
    x_min: 150
    x_max: 205
    y_min: 181
    y_max: 240
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.02;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));

  - platform: touchscreen
    id: button_001
    internal: true
    name: bouton 1 cent
    touchscreen_id: touchid
    x_min: 215
    x_max: 290
    y_min: 181
    y_max: 240
    page_id: page4
    filters:
      - delayed_off: 10ms
    on_release:
      then:
        - lambda: |-
            ESP_LOGD("total a retirer avant:", "%.2f €", id(total_retirer));
            id(total_retirer) = id(total_retirer) + 0.01;
            ESP_LOGD("total a retirer apres:", "%.2f €", id(total_retirer));


  - platform: touchscreen
    id: remettre_zero
    internal: true
    name: remettre a zero
    touchscreen_id: touchid
    x_min: 260
    x_max: 315
    y_min: 45
    y_max: 109
    page_id: page4
    on_click:
      then:
        - lambda: |-
            id(total_retirer) = 0.00;

  - platform: touchscreen
    id: valider
    internal: true
    name: valider
    touchscreen_id: touchid
    x_min: 0
    x_max: 50
    y_min: 65
    y_max: 109
    page_id: page4
    on_click:
      then:
        - globals.set: 
            id: confirm_valider
            value: "1"
        - display.page.show: page5

  - platform: touchscreen
    id: ok_button
    internal: true
    name: ok button
    touchscreen_id: touchid
    x_min: 20
    x_max: 130
    y_min: 110
    y_max: 230
    page_id: page5
    on_click:
      then:
        - script.execute: valider_retrait

  - platform: touchscreen
    id: nok_button
    internal: true
    name: nok button
    touchscreen_id: touchid
    x_min: 160
    x_max: 290
    y_min: 110
    y_max: 230
    page_id: page5
    on_click:
      then:
        - globals.set: 
            id: confirm_valider
            value: "0"
        - display.page.show: page4

  - platform: touchscreen
    id: croix_button
    internal: true
    name: croix button
    touchscreen_id: touchid
    x_min: 270
    x_max: 320
    y_min: 0
    y_max: 30
    page_id: page4
    on_click:
      then:
        - display.page.show: page1
        - script.execute: display_script
        - globals.set:
            id: total_retirer
            value: '0'

  - platform: touchscreen
    id: lien_retrait
    internal: true
    name: page retrait
    touchscreen_id: touchid
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    page_id: page1
    on_click:
      then:
        - script.stop: display_script
        - display.page.show: page4

  - platform: touchscreen
    id: lien_retrait2
    internal: true
    name: page retrait2
    touchscreen_id: touchid
    x_min: 0
    x_max: 320
    y_min: 0
    y_max: 240
    page_id: page3
    on_click:
      then:
        - script.stop: display_script
        - display.page.show: page4

  - platform: gpio
    pin:
      number: GPIO9
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "2"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 7
            range_to: 7
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%

        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 2 euros"};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 2;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"Genial!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 7
            range_to: 7
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO10
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "0.5"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 5
            range_to: 5
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.5;'
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 50 cent."};'

        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"No esta mal"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 5
            range_to: 5
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO6
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 1s
    name: "0.1"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 3
            range_to: 3
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 10 cent."};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.1;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"que poquito!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 3
            range_to: 3
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO19
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "0.02"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 1
            range_to: 1
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 2 cent."};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.02;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"Que cutre!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 1
            range_to: 1
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO3
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "1"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 6
            range_to: 6
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+1 euro"};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 1;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"Cool!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 6
            range_to: 6
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO8
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "0.2"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 4
            range_to: 4
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 20 cent."};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.2;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"Puedes hacer mejor"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 4
            range_to: 4
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO18
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "0.05"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 2
            range_to: 2
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 5 cent."};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.05;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"uff, que poquito!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 2
            range_to: 2
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

  - platform: gpio
    pin:
      number: GPIO11
      inverted: false
      mode:
        input: true
        pullup: true
    filters:
      - delayed_off: 500ms
    name: "0.01"
    device_class: motion
    on_press:
      then:
        - script.execute: reveil
        - light.addressable_set:
            id: led_coins
            range_from: 0
            range_to: 0
            red: 0%
            green: 100%
            blue: 0%
            color_brightness: 80%
        - script.execute: melodie
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"+ 1 cent."};'
        - sensor.template.publish:
            id: piece_int
            state: !lambda 'return 0.01;'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {"tacaño!"};'
        - component.update: my_display
        - delay: 2s
        - text_sensor.template.publish:
            id: piece_lib
            state: !lambda 'return {""};'
        - component.update: my_display
        - light.addressable_set:
            id: led_coins
            range_from: 0
            range_to: 0
            color_brightness: 60%
            red: 30%
            green: 63%
            blue: 100%

interval:
  - interval: 50ms
    then:
      animation.next_frame: my_animation